---
title: "inferring trait evolution on subnetworks"
output: github_document
date: 2025-7-9
---

```{julia}
using CSV, DataFrames, PhyloNetworks
using PhyloPlots, RCall, PhyloTraits
using StatsBase
include("snaq_setup.jl");
```

# Estimate transition rates for each subclade

## Set up `@everywhere` block with trait dataframes, correct hvals
```{julia}
#make trait dfs by filtering down to only cols needed
pollinator_df = select(samples, [:simplename, :pollinator])
fruit_df = select(samples, [:simplename, :fruit])

#rename simplename col to species
#(can't change it in samples df because there already exists a species col)
rename!(pollinator_df, :simplename => :species);
rename!(fruit_df, :simplename => :species);

#rename fruit, pollinator to "trait" to be compatible with fitdiscrete
rename!(fruit_df, :fruit => :trait);
rename!(pollinator_df, :pollinator => :trait);
nosicklebill_df = deepcopy(pollinator_df)
nosicklebill_df.trait = replace.(pollinator_df.trait, "sicklebill" => "hummingbird")

nets_to_hvals_smilax = Dict("actinothrix" => 1, 
                        "andinus" => 1, 
                        "brevilimbatid" => 0,
                        "correoides_nobilis" => 0,
                        "eucentropogonid" => 1,
                        "giganteus_burmeisterid" => 0,
                        "odontosepalus_colombianid" => 2,
                        "peruvianid" => 0,
                        "tupaeformis" => 1,
                        "umbellatus" => 1)
```


## Load in supertree calibrated network estimate transition rates
```{julia}
supertree = readnewick("output/snaq-withoutsmilax/supernet.tre")

filtered_samples = subset(samples, :simplename => ByRow(in(tiplabels(supertree))))
filtered_nosicklebill = subset(nosicklebill_df, :species => ByRow(in(tiplabels(supertree))))
filtered_fruit = subset(fruit_df, :species => ByRow(in(tiplabels(supertree))))
species = filtered_samples.simplename

s1_poll = fitdiscrete(supertree, :ERSM, species, select(filtered_nosicklebill, :trait); optimizeQ=true)
s2_poll = fitdiscrete(supertree, :BTSM, species, select(filtered_nosicklebill, :trait); optimizeQ=true)
s1_fruit = fitdiscrete(supertree, :ERSM, species, select(filtered_fruit, :trait); optimizeQ=true)
s2_fruit = fitdiscrete(supertree, :BTSM, species, select(filtered_fruit, :trait); optimizeQ=true)
```

compare AIC of each model:
```{julia}
aic(s1_poll) #92.26033338520169 --> much better!
aic(s2_poll) #233.5170854022659
aic(s1_fruit) #56.38313045514319 --> much better!
aic(s2_fruit) #105.43158109464444
```

we want the model with the lowest AIC --> in this case both s1 (ERSM) models were best.

julia> s1_poll
PhyloTraits.StatisticalSubstitutionModel:
Equal Rates Substitution Model with k=2,
  all rates equal to α=1.68814.
  rate matrix Q:
       hummingbird     bat
  hummingbird       *  1.6881
       bat  1.6881       *
on a network with 7 reticulations
data:
  91 species
  1 trait
log-likelihood: -45.13017

julia> s1_fruit
PhyloTraits.StatisticalSubstitutionModel:
Equal Rates Substitution Model with k=2,
  all rates equal to α=0.64125.
  rate matrix Q:
           capsule   berry
   capsule       *  0.6413
     berry  0.6413       *
on a network with 7 reticulations
data:
  91 species
  1 trait
log-likelihood: -27.19157

```{julia}
s1_poll_rate = s1_poll.model.rate[1]
s1_fruit_rate = s1_fruit.model.rate[1]
```

# Fit rates to subclades with trait variation
```{julia}
traits_to_clades = Dict("fruit" => ["giganteus_burmeisterid", "odontosepalus_colombianid"], 
                        "pollinator" => ["actinothrix", "andinus", "correoides_nobilis", "giganteus_burmeisterid",
                                        "peruvianid", "tupaeformis", "umbellatus"])

m_fruit = BinaryTraitSubstitutionModel([s1_fruit_rate, s1_fruit_rate], ["berry", "capsule"]);
m_poll = BinaryTraitSubstitutionModel([s1_poll_rate, s1_poll_rate], ["hummingbird", "bat"]);

for (trait,cladelist) in traits_to_clades
    for clade in cladelist
        if trait == "fruit"
            asrmodel = m_fruit
            trait_df = filtered_fruit
        elseif trait == "pollinator"
            asrmodel = m_poll
            trait_df = filtered_nosicklebill
        end
    

        if clade == "brevilimbatid"
            continue #has no trait variation
        elseif clade == "odontosepalus_colombianid"
            filename = "output/snaq-withsmilax/" * clade * "_calibratednet.tre"
        else
            if nets_to_hvals_smilax[clade] == 0
                filename = "output/snaq-withoutsmilax/" * clade * "_calibratedtree.tre"
            else
                filename = "output/snaq-withoutsmilax/" * clade * "_calibratednet.tre"
            end
        end

        cladetree = readnewick(filename)
        #prune out outgroup
        deleteleaf!(cladetree, "Lysipomia_pumila")
        trait_df = subset(trait_df, :species => ByRow(in(tiplabels(cladetree))))
        species = trait_df.species
        asr_sym = Symbol(clade * "_" * trait * "_asr")
        subclade_model_fit = fitdiscrete(cladetree, asrmodel, species, select(trait_df, :trait))
        asr_sym  = ancestralreconstruction(subclade_model_fit)
        eval(asr_sym)
    end
end
```

# Visualize results per subclade

fixit: need to update from here on

```{julia}
function plot_discreteasr(asr::DataFrame, figure_filename::AbstractString, net::HybridNetwork, trait::AbstractString)
    asr_dc = deepcopy(asr)
    net_dc =  deepcopy(net)
    PhyloNetworks.resetnodenumbers!(net_dc)
    colnames = names(asr_dc)[3:end] # to get the correct state - probability match
    # create a new column in the asr data frame, filled with the empty string ""
    asr_dc[!,:fake] .= ""; # to add fake internal node labels later: and extract their positions

    coltrait = ["red","grey"] # or anything else: names that R knows how to interpret

    R"pdf"(figure_filename, height=6, width=8);
    # start the plot
    R"par"(mar=[0,0,0,0]);
    res = plot(net_dc, tipoffset=0.5, xlim=[0.5,16], arrowlen=0.15,
            nodelabel = asr_dc[:,[:nodenumber, :fake]]);
    ndf = res[:node_data] # locations of internal nodes --> this is different depending on PhyloPlots version

    # add pie charts, using locations of internal nodes
    for i in 1:nrow(asr_dc) # loop over each row in the ancestral state reconstruction data frame
        ii = findfirst(isequal(string(asr_dc[!,:nodenumber][i])), ndf[!,:num]);
        colpp = Vector(asr_dc[i,colnames]);    
        R"ape::floating.pie.asp"(ndf[ii,:x], ndf[ii,:y], colpp,
                                radius=0.2, col=coltrait);
    end
    # add legend with correct mapping of color -> state
    R"legend"(x=1, y=19, legend=colnames, pch=21, var"pt.bg"=coltrait,
            bty="n", title=trait, var"title.adj"=0, var"pt.cex"=1.5);
    R"dev.off"();
end
#fixits: margins, legend, add gammas
```

```{julia}
asrs_to_nets = Dict(
    "actinothrix_pollinator"            => [actinothrix_pollinator_asr, actinothrix_calibrated],
    "eucentropogonid_pollinator"        => [eucentropogonid_pollinator_asr, eucentropogonid_calibrated],
    "peruvianid_pollinator"             => [peruvianid_pollinator_asr, peruvianid_calibrated],
    "umbellatus_pollinator"             => [umbellatus_pollinator_asr, umbellatus_calibrated],
    "andinus_pollinator"                => [andinus_pollinator_asr, andinus_calibrated],
    "tupaeformis_pollinator"            => [tupaeformis_pollinator_asr, tupaeformis_calibrated],
    "giganteus-burmeisterid_pollinator" => [giganteus_burmeisterid_pollinator_asr, giganteus_burmeisterid_calibrated],
    "giganteus-burmeisterid_fruit"      => [giganteus_burmeisterid_fruit_asr, giganteus_burmeisterid_calibrated],
    "odontosepalus-colombianid_fruit"   => [odontosepalus_colombianid_fruit_asr, odontosepalus_colombianid_calibrated],
    "correoides-nobilis_pollinator"     => [correoides_nobilis_pollinator_asr, correoides_nobilis_calibrated]
)

for (key, value) in asrs_to_nets
    clade = split(string(key), "_")[1]
    trait = split(string(key), "_")[2]
    figure_filename = "output/" * clade * "_" * trait * ".pdf"

    if trait == "pollinator"
        legend = "pollinator syndrome"
    else legend = "fruit type"
    end

    plot_discreteasr(value[1], figure_filename, value[2], legend)
end
```